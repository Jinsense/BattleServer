#include <windows.h>

#include "Config.h"

CConfig::CConfig()
{
	VER_CODE = NULL;
	ZeroMemory(&MASTERTOKEN, sizeof(MASTERTOKEN));
	MASTERTOKEN_SIZE = eNUM_BUF * 2;

	ZeroMemory(&BATTLE_BIND_IP, sizeof(BATTLE_BIND_IP));
	BATTLE_BIND_IP_SIZE = eNUM_BUF;
	BATTLE_BIND_PORT = NULL;

	ZeroMemory(&MASTER_BIND_IP, sizeof(MASTER_BIND_IP));
	MASTER_BIND_IP_SIZE = eNUM_BUF;
	MASTER_BIND_PORT = NULL;

	ZeroMemory(&CHAT_BIND_IP, sizeof(CHAT_BIND_IP));
	CHAT_BIND_IP_SIZE = eNUM_BUF;
	CHAT_BIND_PORT = NULL;

	ZeroMemory(&MONITOR_BIND_IP, sizeof(MONITOR_BIND_IP));
	MONITOR_BIND_IP_SIZE = eNUM_BUF;
	MONITOR_BIND_PORT = NULL;

	ZeroMemory(&APISERVER_SELECT_ACCOUNT, sizeof(APISERVER_SELECT_ACCOUNT));
	APISERVER_SELECT_ACCOUNT_SIZE = eNUM_BUF * 3;

	ZeroMemory(&APISERVER_SELECT_CONTENTS, sizeof(APISERVER_SELECT_CONTENTS));
	APISERVER_SELECT_CONTENTS_SIZE = eNUM_BUF * 3;

	ZeroMemory(&APISERVER_UPDATE_ACCOUNT, sizeof(APISERVER_UPDATE_ACCOUNT));
	APISERVER_UPDATE_ACCOUNT_SIZE = eNUM_BUF * 3;

	ZeroMemory(&APISERVER_UPDATE_CONTENTS, sizeof(APISERVER_UPDATE_CONTENTS));
	APISERVER_UPDATE_CONTENTS_SIZE = eNUM_BUF * 3;

	WORKER_THREAD = NULL;
	BATTLEROOM_DEFAULT_NUM = NULL;
	BATTLEROOM_MAX_USER = NULL;
	BATTLEROOM_READYSEC = NULL;
	CONNECTTOKEN_RECREATE = NULL;
	SERVER_TIMEOUT = NULL;
	CLIENT_MAX = NULL;
	AUTH_MAX = NULL;
	GAME_MAX = NULL;
	USER_TIMEOUT = NULL;
	SENDTHREAD_SLEEP = NULL;
	AUTHTHREAD_SLEEP = NULL;
	GAMETHREAD_SLEEP = NULL;
	PACKET_CODE = NULL;
	PACKET_KEY1 = NULL;
	PACKET_KEY2 = NULL;
	LOG_LEVEL = NULL;

	ZeroMemory(&IP, sizeof(IP));
}

CConfig::~CConfig()
{

}

bool CConfig::Set()
{
	bool res = true;
	res = _Parse.LoadFile(L"BattleServer_Config.ini");
	if (false == res)
		return false;
	res = _Parse.ProvideArea("NETWORK");
	if (false == res)
		return false;
	res = _Parse.GetValue("VER_CODE", &VER_CODE);
	if (false == res)
		return false;
	_Parse.GetValue("MASTERTOKEN", &MASTERTOKEN[0], &MASTERTOKEN_SIZE);

	_Parse.GetValue("BATTLE_BIND_IP", &IP[0], &BATTLE_BIND_IP_SIZE);
	_Parse.UTF8toUTF16(IP, BATTLE_BIND_IP, sizeof(BATTLE_BIND_IP));
	_Parse.GetValue("BATTLE_BIND_PORT", &BATTLE_BIND_PORT);
	if (false == res)
		return false;

	_Parse.GetValue("MASTER_BIND_IP", &IP[0], &MASTER_BIND_IP_SIZE);
	_Parse.UTF8toUTF16(IP, MASTER_BIND_IP, sizeof(MASTER_BIND_IP));
	_Parse.GetValue("MASTER_BIND_PORT", &MASTER_BIND_PORT);
	if (false == res)
		return false;

	res = _Parse.GetValue("CHAT_BIND_IP", &IP[0], &CHAT_BIND_IP_SIZE);
	if (false == res)
		return false;
	_Parse.UTF8toUTF16(IP, CHAT_BIND_IP, sizeof(CHAT_BIND_IP));
	res = _Parse.GetValue("CHAT_BIND_PORT", &CHAT_BIND_PORT);
	if (false == res)
		return false;

	_Parse.GetValue("MONITOR_BIND_IP", &IP[0], &MONITOR_BIND_IP_SIZE);
	_Parse.UTF8toUTF16(IP, MONITOR_BIND_IP, sizeof(MONITOR_BIND_IP));
	_Parse.GetValue("MONITOR_BIND_PORT", &MONITOR_BIND_PORT);
	if (false == res)
		return false;

	_Parse.GetValue("APISERVER_SELECT_ACCOUNT", &IP[0], &APISERVER_SELECT_ACCOUNT_SIZE);
	_Parse.UTF8toUTF16(IP, APISERVER_SELECT_ACCOUNT, sizeof(APISERVER_SELECT_ACCOUNT));
	_Parse.GetValue("APISERVER_SELECT_CONTENTS", &IP[0], &APISERVER_SELECT_CONTENTS_SIZE);
	_Parse.UTF8toUTF16(IP, APISERVER_SELECT_CONTENTS, sizeof(APISERVER_SELECT_CONTENTS));
	_Parse.GetValue("APISERVER_UPDATE_ACCOUNT", &IP[0], &APISERVER_UPDATE_ACCOUNT_SIZE);
	_Parse.UTF8toUTF16(IP, APISERVER_UPDATE_ACCOUNT, sizeof(APISERVER_UPDATE_ACCOUNT));
	_Parse.GetValue("APISERVER_UPDATE_ACCOUNT", &IP[0], &APISERVER_UPDATE_CONTENTS_SIZE);
	_Parse.UTF8toUTF16(IP, APISERVER_UPDATE_CONTENTS, sizeof(APISERVER_UPDATE_CONTENTS));
	
	_Parse.ProvideArea("SYSTEM");
	res = _Parse.GetValue("WORKER_THREAD", &WORKER_THREAD);
	if (false == res)
		return false;
	_Parse.GetValue("BATTLEROOM_DEFAULT_NUM", &BATTLEROOM_DEFAULT_NUM);
	_Parse.GetValue("BATTLEROOM_MAX_USER", &BATTLEROOM_MAX_USER);
	_Parse.GetValue("BATTLEROOM_READYSEC", &BATTLEROOM_READYSEC);
	_Parse.GetValue("CONNECTTOKEN_RECREATE", &CONNECTTOKEN_RECREATE);
	_Parse.GetValue("USER_TIMEOUT", &USER_TIMEOUT);
	_Parse.GetValue("CLIENT_MAX", &CLIENT_MAX);
	_Parse.GetValue("AUTH_MAX", &AUTH_MAX);
	_Parse.GetValue("GAME_MAX", &GAME_MAX);
	_Parse.GetValue("SERVER_TIMEOUT", &SERVER_TIMEOUT);
	_Parse.GetValue("SEND", &SENDTHREAD_SLEEP);
	_Parse.GetValue("AUTH", &AUTHTHREAD_SLEEP);
	_Parse.GetValue("GAME", &GAMETHREAD_SLEEP);
	_Parse.GetValue("PACKET_CODE", &PACKET_CODE);
	_Parse.GetValue("PACKET_KEY1", &PACKET_KEY1);
	_Parse.GetValue("PACKET_KEY2", &PACKET_KEY2);
	_Parse.GetValue("LOG_LEVEL", &LOG_LEVEL);

	return true;
}